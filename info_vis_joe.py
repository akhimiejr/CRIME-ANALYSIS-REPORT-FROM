# -*- coding: utf-8 -*-
"""info vis_joe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yw2HQPVMj7C0a83B_1mmCSakzryhfhDt

# Unmasking the Shadows: A Data-Driven Journey into the Heart of Crime in Los Angeles

Los Angeles is a dynamic and complex city, and its criminological landscape is no exception. Crime impacts people from all walks of life, but it is often marginalized communities that bear the brunt of victimization. From violent crimes like assault and robbery to non-violent offenses such as theft and fraud, crime leaves lasting scars on individuals and communities alike. However, addressing crime requires a comprehensive and strategic approach that takes into consideration various socio-economic factors, legislative changes, and law enforcement practices. By working together, policymakers, law enforcement, and community stakeholders can create effective strategies to reduce crime rates, enhance public safety, and build more resilient communities in Los Angeles.

Below are some insightful question drived from analying the data;
- question one ;- what crimes affects male and females the most
- question two ;- what time of the day does crime frequently occur
- question three ;- most frequently occurred crime and least occured crime
- question four ;- what geographical area are most likely affected by crime
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go

df= pd.read_csv("Crime_Data_from_2020_to_Present (1).csv")

pd.set_option("display.max_columns", None)

df.head()

df.info()

df.describe().T

df.isnull().sum()

df[df.duplicated()]



# Remove trailing spaces in every column
def strip_string_columns(df):
    return df.applymap(lambda x: x.strip() if isinstance(x, str) else x)

# Now you can call the function to apply the stripping operation to all string columns
df = strip_string_columns(df)

df['AREA NAME'].unique()

df['Status Desc'].unique()

df['Crime Category'].unique()

def replace_values_with_unknown(df, column_name):
    # Define the values to be replaced
    values_to_replace = ["'X', np.nan, 'H', '-'"]
    # Use a lambda function with apply to replace values with 'Unknown'
    df[column_name] = df[column_name].apply(lambda x: 'non-identity' if x in values_to_replace else x)
    return df

# Call the function to replace values with 'Unknown' in the specified column
df = replace_values_with_unknown(df, 'Vict Sex')
df

# Convert date columns to datetime format
df['Date Rptd'] = pd.to_datetime(df['Date Rptd'])
df['DATE OCC'] = pd.to_datetime(df['DATE OCC'])

df.info()

# Convert 'TIME OCC' to string format and pad with leading zeros if necessary
df['TIME OCC'] = df['TIME OCC'].astype(str).str.zfill(4)

# Combine 'DATE OCC' and 'TIME OCC' into a single datetime column
df['Datetime OCC'] = pd.to_datetime(df['DATE OCC'].astype(str) + ' ' + df['TIME OCC'].astype(str), format='%Y-%m-%d %H%M')

# Define a function to extract additional temporal features
def extract_temporal_features(df):
    # Extract day of the week
    df['Day of Week'] = df['Datetime OCC'].apply(lambda x: x.day_name())
    # Extract month
    df['Month'] = df['Datetime OCC'].apply(lambda x: x.month_name())
    # Extract hour
    df['Hour'] = df['Datetime OCC'].apply(lambda x: x.hour)
    # Extract year
    df['Year'] = df['Datetime OCC'].apply(lambda x: x.year)
    return df

# Call the function to extract temporal features and assign it to the DataFrame
df = extract_temporal_features(df)

df



"""# CLASSIFICATION OF DATASET
The classification of crimes in Los Angeles, considering genders affected and seasonal occurrences, provides a comprehensive understanding of crime dynamics. Physical crimes, affecting individuals of all genders, such as assault and burglary, occur year-round without significant seasonal variation, indicating persistent threats to public safety. Mental crimes, like disturbing the peace, impact social order and mental well-being, exhibiting slight fluctuations across seasons, often peaking during holidays or times of economic stress. Sexual crimes, predominantly affecting women and children, occur year-round, with potential seasonal patterns, such as increased incidents during warmer months or holiday periods. Social crimes, including theft and fraud, affect all genders consistently throughout the year, with specific types showing seasonal variations, such as an increase during holiday shopping seasons. Health-related crimes, such as child abuse and reckless driving, pose risks to public health and safety year-round, potentially showing seasonal fluctuations tied to stress or travel periods. Understanding the nuanced interplay between crime categorizations, genders affected, and seasonal occurrences is crucial for developing targeted interventions and allocating resources effectively to address the multifaceted challenges posed by crime in Los Angeles and promote community safety throughout the year.
"""



# Mapping of crimes to categories
crime_categories = {
    'Physical': [
        'BATTERY - SIMPLE ASSAULT', 'VANDALISM - MISDEMEANOR ($399 OR UNDER)',
        'VANDALISM - FELONY ($400 & OVER, ALL CHURCH VANDALISMS)',
        'ASSAULT WITH DEADLY WEAPON, AGGRAVATED ASSAULT', 'ROBBERY',
        'BURGLARY', 'BURGLARY FROM VEHICLE', 'ARSON', 'BRANDISH WEAPON',
        'INTIMATE PARTNER - SIMPLE ASSAULT', 'BATTERY WITH SEXUAL CONTACT',
        'INTIMATE PARTNER - AGGRAVATED ASSAULT', 'BATTERY POLICE (SIMPLE)',
        'ASSAULT WITH DEADLY WEAPON ON POLICE OFFICER',
        'CRM AGNST CHLD (13 OR UNDER) (14-15 & SUSP 10 YRS OLDER)',
        'CHILD ABUSE (PHYSICAL) - SIMPLE ASSAULT', 'CHILD ABUSE (PHYSICAL) - AGGRAVATED ASSAULT',
        'LYNCHING - ATTEMPTED', 'STALKING', 'CRUELTY TO ANIMALS',
        'RECKLESS DRIVING', 'DRUNK ROLL', 'CHILD ABANDONMENT',
        'CHILD STEALING', 'PURSE SNATCHING', 'VANDALISM - MISDEAMEANOR ($399 OR UNDER)', 'THEFT PLAIN - PETTY ($950 & UNDER)',
        'THEFT, PERSON', 'BURGLARY FROM VEHICLE, ATTEMPTED', 'THEFT FROM MOTOR VEHICLE - GRAND ($950.01 AND OVER)', 'CRIMINAL HOMICIDE', 'BATTERY ON A FIREFIGHTER', 'DRIVING WITHOUT OWNER CONSENT (DWOC)',
        'PROWLER', 'DEFRAUDING INNKEEPER/THEFT OF SERVICES, $950 & UNDER', 'TILL TAP - PETTY ($950 & UNDER)', 'CREDIT CARDS, FRAUD USE ($950 & UNDER)', 'BIKE - ATTEMPTED STOLEN', 'PICKPOCKET, ATTEMPT', 'TELEPHONE PROPERTY - DAMAGE', 'FIREARMS RESTRAINING ORDER (FIREARMS RO)',
        'GRAND THEFT / AUTO REPAIR', 'PICKPOCKET, ATTEMPT', 'BIGAMY', 'FIREARMS EMERGENCY PROTECTIVE ORDER (FIREARMS EPO)', 'VEHICLE, STOLEN - OTHER (MOTORIZED SCOOTERS, BIKES, ETC)'

    ],
    'Sexual': [
        'RAPE, FORCIBLE', 'SEXUAL PENETRATION W/FOREIGN OBJECT',
        'LEWD/LASCIVIOUS ACTS WITH CHILD', 'LEWD CONDUCT',
        'SODOMY/SEXUAL CONTACT B/W PENIS OF ONE PERS TO ANUS OTH',
        'RAPE, ATTEMPTED', 'CHILD PORNOGRAPHY', 'SEX,UNLAWFUL(INC MUTUAL CONSENT, PENETRATION W/ FRGN OBJ',
        'HUMAN TRAFFICKING - COMMERCIAL SEX ACTS', 'BEASTIALITY, CRIME AGAINST NATURE SEXUAL ASSLT WITH ANIM',
        'PEEPING TOM', 'ORAL COPULATION', 'SODOMY/SEXUAL CONTACT B/W PENIS OF ONE PERS TO ANUS OTH'
    ],
    'Mental': [
        'SEX OFFENDER REGISTRANT OUT OF COMPLIANCE', 'CRIMINAL THREATS - NO WEAPON DISPLAYED',
        'DISCHARGE FIREARMS/SHOTS FIRED', 'BOMB SCARE', 'VIOLATION OF RESTRAINING ORDER',
        'VIOLATION OF COURT ORDER', 'SHOTS FIRED AT INHABITED DWELLING',
        'LETTERS, LEWD  -  TELEPHONE CALLS, LEWD', 'INDECENT EXPOSURE',
        'VIOLATION OF TEMPORARY RESTRAINING ORDER', 'VIOLATION OF RESTRAINING ORDER',
        'THROWING OBJECT AT MOVING VEHICLE', 'VIOLATION OF COURT ORDER', 'SHOTS FIRED AT INHABITED DWELLING',
'LETTERS, LEWD - TELEPHONE CALLS, LEWD', 'INDECENT EXPOSURE',
'VIOLATION OF TEMPORARY RESTRAINING ORDER', 'VIOLATION OF RESTRAINING ORDER',
'THROWING OBJECT AT MOVING VEHICLE', 'HUMAN TRAFFICKING - COMMERCIAL SEX ACTS',
'DISTURBING THE PEACE', 'STALKING', 'FAILURE TO DISPERSE', 'INCITING A RIOT', 'DOCUMENT FORGERY / STOLEN FELONY', 'THREATENING PHONE CALLS/LETTERS', 'UNAUTHORIZED COMPUTER ACCESS', 'SHOTS FIRED AT MOVING VEHICLE, TRAIN OR AIRCRAFT', 'DISRUPT SCHOOL', 'TELEPHONE PROPERTY - DAMAGE',
'FIREARMS EMERGENCY PROTECTIVE ORDER (FIREARMS EPO)', 'WEAPONS POSSESSION/BOMBING', 'CRIMINAL HOMICIDE', 'BRIBERY'
],
'Social': [
'SHOPLIFTING - PETTY THEFT ($950 & UNDER)', 'OTHER MISCELLANEOUS CRIME',
'THEFT-GRAND ($950.01 & OVER)EXCPT,GUNS,FOWL,LIVESTK,PROD',
'VEHICLE - STOLEN', 'BIKE - STOLEN', 'TRESPASSING',
'THEFT FROM MOTOR VEHICLE - PETTY ($950 & UNDER)', 'THEFT OF IDENTITY',
'BUNCO, GRAND THEFT', 'ATTEMPTED ROBBERY', 'OTHER ASSAULT',
'BURGLARY, ATTEMPTED', 'BUNCO, PETTY THEFT', 'KIDNAPPING - GRAND ATTEMPT',
'SHOPLIFTING-GRAND THEFT ($950.01 & OVER)', 'RESISTING ARREST',
'KIDNAPPING', 'PURSE SNATCHING', 'PICKPOCKET',
'THEFT FROM PERSON - ATTEMPT', 'THEFT FROM MOTOR VEHICLE - ATTEMPT',
'SHOPLIFTING - ATTEMPT', 'EXTORTION', 'FALSE IMPRISONMENT',
'FAILURE TO YIELD', 'VEHICLE - ATTEMPT STOLEN', 'COUNTERFEIT',
'THEFT PLAIN - ATTEMPT', 'THEFT, COIN MACHINE - ATTEMPT',
'PURSE SNATCHING - ATTEMPT', 'ILLEGAL DUMPING', 'CONTRIBUTING',
'DISHONEST EMPLOYEE - GRAND THEFT', 'HUMAN TRAFFICKING - INVOLUNTARY SERVITUDE',
'GRAND THEFT / INSURANCE FRAUD', 'PETTY THEFT - AUTO REPAIR',
'DISHONEST EMPLOYEE - PETTY THEFT', 'REPLICA FIREARMS(SALE,DISPLAY,MANUFACTURE OR DISTRIBUTE)',
'MANSLAUGHTER, NEGLIGENT', 'FALSE POLICE REPORT', 'CONSPIRACY',
'INCITING A RIOT', 'DISHONEST EMPLOYEE ATTEMPTED THEFT', 'EMBEZZLEMENT, GRAND THEFT ($950.01 & OVER)',
'EMBEZZLEMENT, PETTY THEFT ($950 & UNDER)', 'CREDIT CARDS, FRAUD USE ($950.01 & OVER)', 'CREDIT CARDS, FRAUD USE ($950 & UNDER',
'DEFRAUDING INNKEEPER/THEFT OF SERVICES, OVER $950.01', 'DEFRAUDING INNKEEPER/THEFT OF SERVICES, $950 & UNDER', 'DOCUMENT WORTHLESS ($200 & UNDER)',
'DOCUMENT WORTHLESS ($200.01 & OVER)', 'PIMPING', 'PANDERING', 'BOAT - STOLEN', 'BOAT - ATTEMPTED STOLEN', 'TILL TAP - GRAND THEFT ($950.01 & OVER)',
'THEFT, COIN MACHINE - GRAND ($950.01 & OVER)', 'THEFT, COIN MACHINE - PETTY ($950 & UNDER)',
'THEFT, COIN MACHINE - ATTEMPT', 'DISHONEST EMPLOYEE ATTEMPTED THEFT', 'BLOCKING DOOR INDUCTION CENTER', 'BUNCO, ATTEMPT'
],
'Health-related': [
'DRUGS, TO A MINOR', 'CHILD NEGLECT (SEE 300 W.I.C.)', 'CHILD ANNOYING (17YRS & UNDER)',
'CHILD ABUSE (PHYSICAL) - SIMPLE ASSAULT', 'CHILD ABUSE (PHYSICAL) - AGGRAVATED ASSAULT',
'CHILD ABANDONMENT', 'INCEST (SEXUAL ACTS BETWEEN BLOOD RELATIVES)', 'CONTEMPT OF COURT',
'BLOCKING DOOR INDUCTION CENTER', 'LYNCHING', 'LYNCHING - ATTEMPTED', 'BATTERY ON A FIREFIGHTER',
'DRUNK ROLL', 'CHILD ABANDONMENT', 'LYNCHING', 'FIREARMS RESTRAINING ORDER (FIREARMS RO)',
'FIREARMS EMERGENCY PROTECTIVE ORDER (FIREARMS EPO)', 'EMBEZZLEMENT, GRAND THEFT ($950.01 & OVER)',
'EMBEZZLEMENT, PETTY THEFT ($950 & UNDER)', 'DRUGS, TO A MINOR', 'MANSLAUGHTER, NEGLIGENT'
]
}

# Function to categorize crimes
def categorize_crime(crime):
    for category, crimes_list in crime_categories.items():
        if crime in crimes_list:
            return category
    return 'other'

# Apply categorization function to the 'Crm Cd Desc' column and create a new column 'Crime Category'
df['Crime Category'] = df['Crm Cd Desc'].apply(categorize_crime)

df.head()

# Define a function to categorize days of the week
def categorize_day(day):
    if day in ["Saturday", "Sunday"]:
        return "Weekend"
    else:
        return "Weekday"

# Apply the function to the 'Day of Week' column
df['Day Category'] = df['Day of Week'].apply(categorize_day)

# Define a function to categorize months into seasons
def categorize_season(month):
    if month in ["December", "January", "February"]:
        return "Winter"
    elif month in ["March", "April", "May"]:
        return "Spring"
    elif month in ["June", "July", "August"]:
        return "Summer"
    else:
        return "Fall"

# Apply the function to the 'Month' column
df['Season'] = df['Month'].apply(categorize_season)

# Count the occurrences of each gender
gender_counts = df['Vict Sex'].value_counts()

# Calculate the percentages
percentages = gender_counts / len(df) * 100

# Custom colors for each segment
colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#ff99ff']

# Create a figure and axis
fig, ax = plt.subplots(figsize=(8, 8))

# Plot the pie chart
wedges, texts, autotexts = ax.pie(percentages, labels=percentages.index, autopct='%1.1f%%', startangle=140, colors=colors, shadow=True)

# Customize the appearance
for w in wedges:
    w.set_linewidth(1)
    w.set_edgecolor('white')

for t in texts:
    t.set(fontsize=12, weight='bold')

for at in autotexts:
    at.set(fontsize=12, weight='bold')

# Add a title
plt.title('Gender Distribution of Crime Victims', fontsize=16, weight='bold')

# Set aspect ratio to be equal
ax.axis('equal')

# Show the plot
plt.show()

# Group by gender and category, then count the occurrences of each category
category_counts = df.groupby(['Vict Sex', 'Crime Category']).size().reset_index(name='Count')

# Calculate the total count of each gender
total_counts = category_counts.groupby('Vict Sex')['Count'].sum()

# Calculate the percentage of each category under each gender
category_counts['Percentage'] = category_counts.apply(lambda row: row['Count'] / total_counts[row['Vict Sex']] * 100, axis=1)

# Plotting
plt.figure(figsize=(12, 8))
sns.barplot(data=category_counts, x='Vict Sex', y='Percentage', hue='Crime Category', palette='muted')
plt.title('Percentage of Each Crime Category by Gender', fontsize=16)
plt.xlabel('Gender', fontsize=14)
plt.ylabel('Percentage', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.legend(title='Crime Category', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

category_counts

# Group by hour of occurrence and count the number of crimes in each hour
hourly_crime_count = df.groupby('Hour').size()

# Plotting
plt.figure(figsize=(12, 6))
hourly_crime_count.plot(kind='line', marker='o', color='b')
plt.title('Trend of Crime per Hour', fontsize=16)
plt.xlabel('Hour of Day', fontsize=14)
plt.ylabel('Number of Crimes', fontsize=14)
plt.xticks(range(0, 24), fontsize=12)
plt.yticks(fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.show()

# Filter DataFrame to include only the top 10 crimes
top_5_crimes = df['Crm Cd Desc'].value_counts().head(5).index
df_top_5 = df[df['Crm Cd Desc'].isin(top_5_crimes)]

# Group by hour of occurrence for each crime and count the number of occurrences in each hour
hourly_crime_count_top_5 = df_top_5.groupby(['Crm Cd Desc', 'Hour']).size().reset_index(name='Count')

# Plotting
plt.figure(figsize=(14, 8))
sns.set_palette("husl", 10)  # Set color palette
for crime in top_5_crimes:
    crime_data = hourly_crime_count_top_5[hourly_crime_count_top_5['Crm Cd Desc'] == crime]
    plt.plot(crime_data['Hour'], crime_data['Count'], marker='o', label=crime)

plt.title('Trend of Top 5 Crimes per Hour', fontsize=16)
plt.xlabel('Hour of Day', fontsize=14)
plt.ylabel('Number of Crimes', fontsize=14)
plt.xticks(range(0, 24), fontsize=12)
plt.yticks(fontsize=12)
plt.legend(fontsize=10)
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Group by day of the week and count the occurrences of each day
day_counts = df['Day of Week'].value_counts()

# Sort the days of the week in the correct order (Monday to Sunday)
day_counts = day_counts.reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])

# Set plot style
sns.set_style("whitegrid")

# Plotting
plt.figure(figsize=(10, 6))
sns.barplot(x=day_counts.index, y=day_counts.values, palette="viridis")
plt.title('Crime Rates by Day of the Week', fontsize=16)
plt.xlabel('Day of the Week', fontsize=14)
plt.ylabel('Number of Crimes', fontsize=14)
plt.xticks(rotation=45, fontsize=12)
plt.yticks(fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

# Group by year and month, and count the occurrences of crimes
monthly_crime_counts = df.groupby(['Year', 'Month']).size().reset_index(name='Crime Count')

# Plotting
plt.figure(figsize=(12, 6))
sns.lineplot(data=monthly_crime_counts, x='Month', y='Crime Count', hue='Year', marker='o', palette='tab10', linewidth=2.5)

# Set title and labels
plt.title('Cyclical Patterns in Crime Occurrence', fontsize=18, pad=20)
plt.xlabel('Month', fontsize=14, labelpad=15)
plt.ylabel('Number of Crimes', fontsize=14, labelpad=15)

# Customize ticks and legend
plt.xticks(range(1, 13), ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], fontsize=12)
plt.yticks(fontsize=12)
plt.legend(title='Year', fontsize=12)

# Add grid lines
plt.grid(True, linestyle='--', alpha=0.5)

# Remove top and right spines
sns.despine()

# Add a nice background color
plt.gca().set_facecolor('#f9f9f9')

# Adjust layout
plt.tight_layout()

# Show plot
plt.show()

# Create a dropdown menu with unique crime descriptions
crime_options = [{'label': crime, 'value': crime} for crime in df['Crm Cd Desc'].unique()]

# Group by location and crime description and count occurrences
crime_counts = df.groupby(['AREA NAME', 'Crm Cd Desc']).size().reset_index(name='Count')

# Create an interactive line plot
fig = px.line(crime_counts, x='AREA NAME', y='Count', color='Crm Cd Desc',
              hover_name='Crm Cd Desc', labels={'AREA NAME': 'Location', 'Count': 'Crime Count'},
              title='Trend of Each Crime by Location')

# Update layout
fig.update_layout(
    xaxis_title_font_size=16,
    yaxis_title_font_size=16,
    title_font_size=20,
    xaxis=dict(title='Location', showgrid=True),
    yaxis=dict(title='Crime Count', showgrid=True),
    legend=dict(title='Crime', font=dict(size=12)),
    margin=dict(l=40, r=40, t=80, b=40),
    hovermode="x unified"
)

# Add dropdown menu for crime selection
fig.update_layout(
    updatemenus=[
        dict(
            buttons=list([
                dict(label="All Crimes",
                     method="update",
                     args=[{"visible": True},
                           {"title": "Trend of Each Crime by Location"}]),
            ]),
            direction="down",
            pad={"r": 10, "t": 10},
            showactive=True,
            x=0.1,
            xanchor="left",
            y=1.1,
            yanchor="top"
        ),
        dict(
            buttons=list([
                dict(label=crime['label'],
                     method="update",
                     args=[{"visible": crime_counts['Crm Cd Desc'] == crime['value']},
                           {"title": "Trend of " + crime['label'] + " by Location"}])
                for crime in crime_options
            ]),
            direction="down",
            pad={"r": 10, "t": 10},
            showactive=True,
            x=0.1,
            xanchor="left",
            y=1.05,
            yanchor="top"
        ),
    ]
)

# Show plot
fig.show()

!pip install dash
!pip install Input
!pip install Output

import plotly.express as px
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

# Create a dropdown menu with unique crime descriptions
crime_options = [{'label': crime, 'value': crime} for crime in df['Crm Cd Desc'].unique()]

# Initialize the Dash app
app = dash.Dash(__name__)

# Define the layout of the app
app.layout = html.Div([
    html.H1("Trend of Each Crime by Time in Each Area"),
    dcc.Dropdown(
        id='crime-dropdown',
        options=crime_options,
        value=crime_options[0]['value'],
        clearable=False
    ),
    dcc.Graph(id='crime-trend-graph')
])

# Define callback to update the graph based on the selected crime
@app.callback(
    Output('crime-trend-graph', 'figure'),
    [Input('crime-dropdown', 'value')]
)
def update_graph(selected_crime):
    # Filter the data based on the selected crime
    filtered_data = df[df['Crm Cd Desc'] == selected_crime]

    # Group by hour, area name, and count occurrences
    crime_counts = filtered_data.groupby(['Hour', 'AREA NAME']).size().reset_index(name='Count')

    # Create an interactive line plot
    fig = px.line(crime_counts, x='Hour', y='Count', color='AREA NAME',
                  labels={'Hour': 'Hour of Day', 'Count': 'Crime Count', 'AREA NAME': 'Area Name'},
                  title=f'Trend of {selected_crime} by Time in Each Area')

    return fig

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)

import plotly.express as px

# Replace 'Longitude' with the correct column name from your DataFrame
fig = px.scatter(df, x='LON', y='LAT', color='Crime Category', hover_data=['Crm Cd Desc', 'Datetime OCC'])
fig.show()

import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

# Initialize the Dash app
app = dash.Dash(__name__)

# Define layout
app.layout = html.Div([
    dcc.Graph(id='crime-map'),
    dcc.Dropdown(
        id='crime-dropdown',
        options=[{'label': crime, 'value': crime} for crime in df['Crime Category'].unique()],
        value='Physical',
        multi=False
    )
])

# Define callback to update graph based on dropdown selection
@app.callback(
    Output('crime-map', 'figure'),
    [Input('crime-dropdown', 'value')]
)
def update_map(selected_crime):
    filtered_df = df[df['Crime Category'] == selected_crime]
    fig = px.scatter_mapbox(filtered_df, lat='LAT', lon='LON', hover_data=['Crm Cd Desc', 'Datetime OCC'],
                            color='Crime Category', zoom=10)
    fig.update_layout(mapbox_style='open-street-map')
    return fig

# Run the Dash app
if __name__ == '__main__':
    app.run_server(debug=True)

import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

# Initialize the Dash app
app = dash.Dash(__name__)

# Filter data for each crime category at the start
crime_categories = df['Crime Category'].unique()
filtered_dfs = {crime: df[df['Crime Category'] == crime] for crime in crime_categories}

# Define layout
app.layout = html.Div([
    dcc.Graph(id='crime-map'),
    dcc.Dropdown(
        id='crime-dropdown',
        options=[{'label': crime, 'value': crime} for crime in crime_categories],
        value='Physical',
        multi=False
    )
])

# Define callback to update graph based on dropdown selection
@app.callback(
    Output('crime-map', 'figure'),
    [Input('crime-dropdown', 'value')]
)
def update_map(selected_crime):
    filtered_df = filtered_dfs[selected_crime]
    fig = px.scatter_mapbox(filtered_df, lat='LAT', lon='LON', hover_data=['Crm Cd Desc', 'Datetime OCC'],
                            color='Crime Category', zoom=10)
    fig.update_layout(mapbox_style='open-street-map')
    return fig

# Run the Dash app
if __name__ == '__main__':
    app.run_server(debug=True)

import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

# Initialize the Dash app
app = dash.Dash(__name__)

# Filter data for each crime category at the start
crime_categories = df['Crime Category'].unique()
filtered_dfs = {crime: df[df['Crime Category'] == crime] for crime in crime_categories}

# Define layout
app.layout = html.Div([
    dcc.Graph(id='crime-map'),
    dcc.Dropdown(
        id='crime-dropdown',
        options=[{'label': crime, 'value': crime} for crime in crime_categories],
        value='Physical',
        multi=False
    )
])

# Define callback to update graph based on dropdown selection
@app.callback(
    Output('crime-map', 'figure'),
    [Input('crime-dropdown', 'value')]
)
def update_map(selected_crime):
    filtered_df = filtered_dfs[selected_crime]
    fig = px.scatter_mapbox(filtered_df, lat='LAT', lon='LON', hover_data=['Crm Cd Desc', 'Datetime OCC'],
                            color='Crime Category', zoom=10)
    fig.update_layout(mapbox_style='open-street-map')
    return fig

# Run the Dash app
if __name__ == '__main__':
    app.run_server(debug=True)



